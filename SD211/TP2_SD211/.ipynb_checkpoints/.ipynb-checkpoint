{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TP 2 - Séparateur à vastes marges "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def load_breastcancer(filename):\n",
    "    \"\"\"\n",
    "    Cette fonction lit le fichier filename, par exemple\n",
    "    filename = 'wdbc_M1_B0.data'\n",
    "    Elle retourne \n",
    "    X : une matrice de caracteristiques\n",
    "    y : un vecteur des classes tel que si y[i] = 1, la tumeur est maligne\n",
    "        et si y[i] = -1, la tumeur est benigne\n",
    "\n",
    "    Pour plus d'infos sur la base de donnees,\n",
    "    https://archive.ics.uci.edu/ml/datasets/Breast+Cancer+Wisconsin+%28Prognostic%29\n",
    "    \"\"\"\n",
    "\n",
    "    data = np.loadtxt(filename, delimiter=',')\n",
    "\n",
    "    # la colonne 0 ne nous interesse pas ici\n",
    "    y = data[:, 1] * 2 - 1\n",
    "    X = data[:, 2:]\n",
    "\n",
    "    # Standardisation de la matrice\n",
    "    X = X - np.mean(X, axis=0)\n",
    "    X = X / np.std(X, axis=0)\n",
    "\n",
    "    return X, y\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#load_breastcancer(\"wdbcM1B0.data\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Méthodes du sous-gradient"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have $$\\forall i, \\epsilon_{i} \\geq 0 $$ and $$\\epsilon_{i} \\geq 1-y_{i}(x_{i}^Tv+a) $$\n",
    "\n",
    "We want to minimize $$\\epsilon_{i}$$ with $$\\epsilon_{i} \\geq max(0,1-y_{i}(x_{i}^Tv+a)) $$\n",
    "\n",
    "It's equivalent to minimize $$max(0,1-y_{i}(x_{i}^Tv+a))$$\n",
    "\n",
    "So both problems are equivalent. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5,1,'Function h')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def h(z):\n",
    "    return np.maximum(np.zeros(z.shape),1-z)\n",
    "\n",
    "x=np.arange(-10,10,0.1)\n",
    "y=h(x)\n",
    "plt.plot(x,y)\n",
    "plt.title(\"Function h\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see graphically that in 1, h is superior to every straight line whose slop is in 0 and 1.\n",
    "h is differentiable in $$]-\\infty,1[$$ and in $$]1,+\\infty[$$ so there is no problem there."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We take :\n",
    "\n",
    "$$ N(w)=\\sum_{i=1}^{m+1} N_j(w_j)$$ with $$ \\forall i \\in [1,n], N_j(w_j)=\\frac{1}{2}w_j²$$ and $$N_{m+1}=0$$\n",
    "\n",
    "PAS FINI !\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, y = load_breastcancer(\"wdbcM1B0.data\")\n",
    "\n",
    "M = np.dot(np.diag(y), np.concatenate([X, np.ones((569,1))], axis = 1))\n",
    "\n",
    "def N(va):\n",
    "    return 0.5 * np.sum(va[:-1]**2)\n",
    "\n",
    "def diff_N(va):\n",
    "    return np.concatenate([va[:-1], [0]])\n",
    "\n",
    "def H_M(va):\n",
    "    return np.sum(h(np.dot(M,va)))\n",
    "\n",
    "def diff_H_M(va):\n",
    "    return np.dot(M.T, (np.dot(M,va)>=1)- 1)\n",
    "\n",
    "def f(va):\n",
    "    return N(va) + H_M(va)\n",
    "\n",
    "\n",
    "def diff_f(va):\n",
    "    return diff_N(va) + diff_H_M(va)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sub_gradient_method(va0, it_number):\n",
    "    va_m=np.zeros(va0.shape)\n",
    "    s_gamma=0\n",
    "    for k in range(it_number):\n",
    "        gamma = 0.001/np.sqrt(k+1)\n",
    "        s_gamma+= gamma\n",
    "        va_m+=va0*gamma\n",
    "        va0=va0-gamma*diff_f(va0)\n",
    "    return va_m/s_gamma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The initial value of f is 569.0\n",
      "The final value of f is 30.42205653841742\n"
     ]
    }
   ],
   "source": [
    "va0 = np.zeros((31,))\n",
    "print\"The initial value of f is\",f(va0)\n",
    "va_final = sub_gradient_method(va0, 10000)\n",
    "print\"The final value of f is\",f(va_final)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Méthode du sous-gradient stochastique"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have : \n",
    "$$ E(f_I(v,a)) = \\sum_i P(I = i) \\times f_i(v,a) = \\frac{1}{n}\\sum_i f_i(v,a) $$\n",
    "\n",
    "So\n",
    "\n",
    "$$E(f_I(v,a)) = \\frac{1}{2} \\sum_j v_j^2 + \\frac{1}{n}\\sum_i c\\,n\\,max(0,1-y_i(x_i^Tv + a))= \\frac{1}{2} \\sum_j v_j^2 + c\\sum_i max(0,1-y_i(x_i^Tv + a))= f(v,a)$$ "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "def diff_h_M_i(va, i):\n",
    "    return ((np.dot(M[i,:],va)>=1)- 1) * M[i,:]\n",
    "\n",
    "def diff_f_i(va, i):\n",
    "    return diff_N(va) +  M.shape[0] * diff_h_M_i(va,i)\n",
    "\n",
    "def stochastic_gradient_method(va0, it_number):\n",
    "    n = M.shape[0]\n",
    "    va_moy = np.zeros(va0.shape)\n",
    "    gamma_sum = 0\n",
    "    for i in range(it_number):\n",
    "        I = np.random.randint(n)\n",
    "        gamma = 0.001/np.sqrt(i+1)\n",
    "        gamma_sum += gamma\n",
    "        va_moy += va0 * gamma\n",
    "        va0 = va0 - gamma * diff_f_i(va0,I)\n",
    "    return va_moy/gamma_sum\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The initial value of f is 569.0\n",
      "The final value of f is 44.59315032595653\n"
     ]
    }
   ],
   "source": [
    "va0 = np.zeros((31,))\n",
    "print\"The initial value of f is\",f(va0)\n",
    "va_final = stochastic_gradient_method(va0, 10000)\n",
    "print\"The final value of f is\",f(va_final)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This method is much more quick but the result is worst."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Méthode du lagrangien augmenté"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The lagrangian is :\n",
    "\n",
    "$$L(v, a, \\xi, \\phi) = \\frac{1}{2} \\sum_jv_j^2 + c\\sum_i\\xi_i + \\sum_i\\phi_i \\times (1-M_i(v,a)-\\xi_i) + \\sum_i \\iota_{R_+}(\\phi_i)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4.2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have $$g(x, \\phi) = − \\frac{1}{2p}\\phi² + \\frac{p}{2}(max(0, x+\\frac{\\phi}{p}))^{-\\frac{1}{2}}$$\n",
    "\n",
    "$$if \\ x \\geq -\\frac{\\phi}{p}, \\ \\nabla_xg(x, \\phi) = px+\\phi$$\n",
    "$$if \\ x \\leq -\\frac{\\phi}{p}, \\ \\nabla_xg(x, \\phi) = 0$$\n",
    "\n",
    "The limits are the same, so g is x-differentiable and  $$ \\forall x, \\ \\nabla_xg(x, \\phi) = max(px+\\phi,0) $$\n",
    "\n",
    "We use the same for phi : \n",
    "\n",
    "$$\\nabla_\\phi g(x, \\phi) = \\left \\{ \\begin{array} {} -\\frac{\\phi}{\\rho} & if \\, \\phi \\le - x{\\rho} \\\\ x & if \\, \\phi \\gt - x{\\rho} \\\\ \\end{array} \\right . =\\max (-\\frac{\\phi}{\\rho}, x)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4.3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$ \\nabla_xg(x, \\phi)\\  is  \\ an \\  increasing \\ function $$\n",
    "$$ \\nabla_\\phi g(x, \\phi)\\  is  \\ an \\  decreasing \\ function $$\n",
    "\n",
    "So we have $$x \\mapsto g(x,\\phi) \\ convex $$\n",
    "and $$ \\phi\\mapsto g(x,\\phi) \\ concave $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4.4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "p=2\n",
    "\n",
    "def diff_x_g(x, phi):\n",
    "    return p*np.maximum(np.zeros(x.shape),x+phi/p)\n",
    "\n",
    "def diff_phi_g(x,phi):\n",
    "    return np.maximum(-phi/p,x)\n",
    "\n",
    "\n",
    "def grad_method(phi, psi):\n",
    "    #Initial conditions \n",
    "    v = np.zeros((30,))\n",
    "    a = 0\n",
    "    xi = np.zeros((569,))\n",
    "    dv = np.zeros((30,))\n",
    "    da = 1.5\n",
    "    dxi = np.zeros((569,))            \n",
    "    while np.sum(dv**2)+da**2+np.sum(dxi**2)>1:\n",
    "        x = 1-xi-np.dot(np.diag(y), np.dot(X, v) + a)\n",
    "        #gradients\n",
    "        dv = v - np.dot(np.dot(np.diag(y), X).T, diff_x_g(x, psi))\n",
    "        da = -np.sum(y * diff_x_g(x,psi))\n",
    "        dxi = c - diff_x_g(-xi, phi) - diff_x_g(x, psi)\n",
    "        gamma = 1/750\n",
    "        v -= gamma * dv\n",
    "        a -= gamma * da\n",
    "        xi -= gamma * dxi    \n",
    "    return v, a, xi"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.15+"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
